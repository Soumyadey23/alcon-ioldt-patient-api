
pipeline {
    agent any
    options {
        timeout(time: 45, unit: 'MINUTES')
        skipDefaultCheckout()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(artifactDaysToKeepStr: '30', artifactNumToKeepStr: '2', daysToKeepStr: '10', numToKeepStr: '15'))
    }

    environment {
        DEPLOY_ENV = "${BRANCH_NAME == 'master' ? 'prod' : BRANCH_NAME}"
        DEPLOY_PARAM_ENV = "${DEPLOY_ENV == 'dev' ? 'DEVELOPMENT' : BRANCH_NAME}"
        //AWS_ACCESS_KEYS = credentials("soumya-terraform${BRANCH_NAME}")
		AWS_ACCESS_KEY_ID = "AKIAYA42Z6IPHBTQK6CU"
		AWS_SECRET_ACCESS_KEY = "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"
        AWS_DEFAULT_REGION = "us-east-1"
        AWS_ACCOUNTID = "551691088414"
        DOCKER_ECR_ACCOUNT = "551691088414.dkr.ecr.us-east-1.amazonaws.com"
		
        
        
        
        
    }

    stages {
        stage('Checkout') {
            agent any
            steps {
                step([$class: 'WsCleanup'])
                checkout scm
              
            }
        }

        stage('Build') {
            agent any
            steps {
                script {
                                      
                    sh '''
	                        source /etc/profile.d/maven.sh
                            mvn --version
                            pwd
                            ls -ltr
                            mvn clean package
                        
                        '''
                }
            }
        }

          stage('Run Unit Tests') {
              agent any            
              steps {
                  sh '''
	                        source /etc/profile.d/maven.sh
                            mvn --version
                            pwd
                            ls -ltr
                            mvn test
                        
                        '''
              }
          }

         stage('Build Docker Image') {
            agent any
             steps {
                
                    sh '''
                       aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${DOCKER_ECR_ACCOUNT}
                       docker build -t alcon-ioldt-patient-api-tf:${BUILD_NUMBER} -f Dockerfile --build-arg BUILD_NUMBER=${BUILD_NUMBER} --build-arg BRANCH_NAME=${DEPLOY_ENV} .
                       docker tag alcon-ioldt-patient-api-tf:${BUILD_NUMBER} ${DOCKER_ECR_ACCOUNT}/alcon-ioldt-patient-api-tf:latest                                                
                       docker push ${DOCKER_ECR_ACCOUNT}/alcon-ioldt-patient-api-tf:latest
                    '''
                }
                
            }
        }
    //     stage('Deploy') {
    //         agent { label 'cloud-rdit-rss-linux' }
    //         steps {
    //             echo 'Deploy Docker Image in ECS'
    //             script {
    //                 sh "aws ecs update-service --cluster alcon-mlops-ioldt-${DEPLOY_ENV}-patient-api-offering-tf --service alcon-mlops-ioldt-${DEPLOY_ENV}-patient-api-offering-service-tf --region $AWS_DEFAULT_REGION --task-definition ${DOCKER_ECR_ACCOUNT}/alcon-ioldt-patient-api:latest"
    //             }
    //         }
    //     }

    }
        

   







